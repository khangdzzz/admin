{
  "Generate Common List Screen": {
    "prefix": "glsc",
    "body": [
      "\n<template>\n  <div class=\"d-flex flex-column fill-height\">\n    <!-- Todo: need to define page title key and update here -->\n    <ListSearchHeader\n      :title=\"\\$t('update screen title here')\"\n      v-model:model-value.sync=\"searchString\"\n    >\n      <template #action>\n        <a-button\n          class=\"btn-action color-btn-delete\"\n          type=\"primary\"\n          @click=\"(\\$event: MouseEvent) => deleteItems(\\$event, selectedKeys)\"\n          ghost\n          v-if=\"selectedKeys.length > 0\"\n        >\n          <template #icon>\n            <IcTrash class=\"btn-icon\" :color=\"'#F54E4E'\" />\n          </template>\n          {{ \\$t(\"delete_btn\") }}\n        </a-button>\n        <a-button type=\"primary\" class=\"btn-add-new\" @click=\"onAddNewItem\">\n          <template #icon>\n            <img src=\"@/assets/icons/ic_plus.svg\" class=\"btn-icon\" />\n          </template>\n          {{ \\$t(\"add_btn\") }}\n        </a-button>\n      </template>\n    </ListSearchHeader>\n    <div class=\"table-container mx-30 mb-30\">\n      <div v-if=\"!isLoading && data && data.length\">\n        <div\n          v-if=\"selectedKeys.length > 0\"\n          class=\"table-container__lbl-data-selected\"\n        >\n          {{\n            \\$t(\n              selectedKeys.length <= 1\n                ? \"common_lbl_data_selected\"\n                : \"common_lbl_multiple_data_selected\",\n              { number: selectedKeys.length }\n            )\n          }}\n        </div>\n        <a-table\n          :columns=\"columns\"\n          :data-source=\"data\"\n          :pagination=\"false\"\n          :scroll=\"{ y: tableMaxHeight }\"\n          :row-key=\"(record) => record.id\"\n          :customRow=\"customRow\"\n          :row-selection=\"rowSelection\"\n          @resizeColumn=\"handleResizeColumn\"\n        >\n          <template #headerCell=\"{ column }\">\n            <template v-if=\"column.key !== 'action'\">\n              <div>\n                <span class=\"header-title\">{{ \\$t(column.title) }}</span>\n                <SortView\n                  v-if=\"column.key\"\n                  class=\"mx-12\"\n                  :sort=\"sort[column.key]\"\n                  @click=\"changeSort(column.key)\"\n                />\n              </div>\n            </template>\n          </template>\n          <template #bodyCell=\"{ column, record, text }\">\n            <template v-if=\"column.key === 'action'\">\n              <img\n                src=\"@/assets/icons/ic_btn_edit.svg\"\n                class=\"action-icon\"\n                @click=\"(\\$event) => onEditItem(\\$event, record.id)\"\n              />\n              <img\n                src=\"@/assets/icons/ic_btn_delete.svg\"\n                class=\"action-icon\"\n                @click=\"(\\$event) => onDeleteItem(\\$event, record.id)\"\n              /><img\n                src=\"@/assets/icons/ic_btn_qrcode.svg\"\n                class=\"action-icon\"\n              />\n            </template>\n            <template v-else>\n              <span class=\"table-container__list-item-text\">{{\n                text || NULL_VALUE_DISPLAY\n              }}</span>\n            </template>\n          </template>\n        </a-table>\n        <ThePagination\n          :isShowPagination=\"!isLoading && data && !!data.length\"\n          :currentPage=\"pageOption.currentPage\"\n          :pageSize=\"pageOption.pageSize\"\n          :total=\"pageOption.total\"\n          @onShowSizeChange=\"onShowSizeChange\"\n          @onChange=\"onChange\"\n        />\n      </div>\n      <NoData\n        :value=\"searchString\"\n        :is-loading=\"isLoading\"\n        @onClick=\"handleBackToList\"\n        v-if=\"isLoading || !data || !data.length\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\n//#region import\nimport IcTrash from \"@/assets/icons/IcTrash.vue\";\nimport { i18n } from \"@/i18n\";\nimport SortView from \"@/modules/common/components/SortView.vue\";\nimport ThePagination from \"@/modules/common/components/ThePagination.vue\";\nimport { NULL_VALUE_DISPLAY } from \"@/modules/common/constants/table.constant\";\nimport { Pagination } from \"@/modules/common/models\";\nimport { Sort } from \"@/modules/common/models/sort.enum\";\nimport { TableColumnsType } from \"ant-design-vue\";\nimport { debounce } from \"lodash\";\nimport {\n  computed,\n  inject,\n  onMounted,\n  onUnmounted,\n  reactive,\n  ref,\n  watch\n} from \"vue\";\nimport ListSearchHeader from \"../components/ListSearchHeader.vue\";\nimport NoData from \"../components/NoData.vue\";\nimport MessengerParamModel from \"../models/messenger-param.model\";\nimport { MessengerType } from \"../models/messenger-type.enum\";\n//#endregion\n//#region props\n//#endregion\n\n//#region variables\nconst searchString = ref<string>(\"\");\n// Todo: need to define your columns here. Note: all columns that are not action column, must enable resizable\nconst columns = ref<TableColumnsType>([\n  {\n    title: \"name\",\n    dataIndex: \"name\",\n    key: \"name\",\n    width: -1,\n    resizable: true\n  },\n  {\n    title: \"email\",\n    dataIndex: \"email\",\n    key: \"email\",\n    width: -1,\n    resizable: true\n  },\n  {\n    title: \"\",\n    dataIndex: \"action\",\n    key: \"action\",\n    width: \"190px\"\n  }\n]);\nconst data = ref<any[]>([]); // Todo: must define data model and update here\nconst selectedKeys = ref<number[]>([]);\nconst sort = ref({});\nconst isLoading = ref<boolean>(false);\nconst innerHeight = ref<number>(0);\nconst pageOption = reactive<Pagination<any>>({\n  // Todo: must define data model and update here\n  currentPage: 1,\n  pageSize: 20,\n  total: 0\n});\nconst messenger: (param: MessengerParamModel) => void =\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  inject(\"messenger\")!;\n//#endregion\n\n//#region hooks\nonMounted(() => {\n  innerHeight.value = window.innerHeight;\n  window.addEventListener(\"resize\", () => {\n    innerHeight.value = window.innerHeight;\n  });\n\n  const sortKey = columns.value.map((c) => c.key?.toString());\n  sortKey.forEach((key) => {\n    if (key && key !== \"action\") sort.value[key] = Sort.None;\n  });\n\n  fetchDataAsync();\n});\n\nonUnmounted(() => {\n  innerHeight.value = window.innerHeight;\n  window.removeEventListener(\"resize\", () => {\n    innerHeight.value = window.innerHeight;\n  });\n});\n//#endregion\n\n//#region function\nconst fetchDataAsync = async (): Promise<void> => {\n  isLoading.value = true;\n  // Todo: fetch data from api\n  isLoading.value = false;\n  const mockData: {\n    id: number;\n    name: string;\n    email: string;\n  }[] = [];\n  for (let i = 0; i < 50; i++) {\n    mockData.push({\n      id: i,\n      name: `Nghia \\${i}`,\n      email: `nghiahm\\${i}@techvify.com.vn`\n    });\n  }\n  data.value = mockData;\n\n  // pageOption.currentPage = res.current_page || 0;\n  // pageOption.total = res.count;\n\n  pageOption.currentPage = 2;\n  pageOption.total = 120;\n};\n\nconst onSearchChange = debounce((): void => {\n  pageOption.currentPage = 1;\n  selectedKeys.value = [];\n  fetchDataAsync();\n}, 500);\n\nconst onShowSizeChange = (current: number, pageSize: number): void => {\n  pageOption.currentPage = current;\n  pageOption.pageSize = pageSize;\n  fetchDataAsync();\n};\n\nconst onChange = (pageNumber: number): void => {\n  pageOption.currentPage = pageNumber;\n  fetchDataAsync();\n};\n\nconst handleBackToList = (): void => {\n  if (searchString.value) {\n    isLoading.value = true;\n    searchString.value = \"\";\n  }\n};\n\nconst onAddNewItem = (): void => {\n  // Todo: need to navigate to add new item screen\n};\n\nconst deleteItems = (e: MouseEvent, ids: number[]): void => {\n  if (e && e.stopPropagation) e.stopPropagation();\n  messenger({\n    title: \"popup_msg_confirm_delete\",\n    message: \"\",\n    type: MessengerType.Confirm,\n    buttonOkTitle: \"btn_delete\",\n    callback: async (isConfirm: boolean): Promise<void> => {\n      if (!isConfirm) {\n        return;\n      }\n      onDeleteItems(ids);\n    }\n  });\n};\n\nconst onDeleteItems = async (deleteIds: number[]): Promise<void> => {\n  if (!deleteIds.length) {\n    return;\n  }\n  isLoading.value = true;\n  // Todo: Call API to delete\n  const isSuccess = true;\n  isLoading.value = false;\n  if (!isSuccess) {\n    messenger({\n      title: \"popup_delete_fail_lbl_title\",\n      message: \"\",\n      type: MessengerType.Error\n    });\n    return;\n  }\n  messenger({\n    title:\n      deleteIds.length > 1\n        ? i18n.global.t(\"common_msg_delete_multiple_successfully\", {\n            number: deleteIds.length\n          })\n        : \"common_msg_delete_successfully\",\n    message: \"\",\n    type: MessengerType.Success,\n    callback: (isConfirm: boolean): void => {\n      isConfirm;\n      fetchDataAsync();\n    }\n  });\n  pageOption.currentPage = 1;\n  selectedKeys.value = [];\n  searchString.value = \"\";\n};\n\nconst onEditItem = (e: MouseEvent, id: number): void => {\n  if (e && e.stopPropagation) e.stopPropagation();\n  // Todo: go edit item screen with id\n  id;\n};\n\nconst onDeleteItem = (e: MouseEvent, id: number): void => {\n  if (e && e.stopPropagation) e.stopPropagation();\n  deleteItems(e, [id]);\n};\n\n// Todo: remove this if don't need to click list item to show detail\nconst customRow = (\n  record: any // Todo: enter data type here\n): { onClick: (_event: PointerEvent) => void } => {\n  return {\n    onClick: (_event: PointerEvent): void => {\n      _event;\n      record;\n      // Todo: handle when press list item\n    }\n  };\n};\n\nconst rowSelection = computed(() => {\n  return {\n    selectedRowKeys: selectedKeys.value,\n    onChange: (keys: number[]): void => {\n      selectedKeys.value = keys;\n    },\n    columnWidth: \"50px\"\n  };\n});\n\nconst handleResizeColumn = (w: number, col: { width: number }): void => {\n  col.width = w;\n};\n\nconst calculateNextSortStatus = (currentSort: Sort): Sort => {\n  switch (currentSort) {\n    case Sort.Asc:\n      return Sort.Desc;\n    case Sort.Desc:\n      return Sort.None;\n    default:\n      return Sort.Asc;\n  }\n};\n\nconst changeSort = (key: string): void => {\n  Object.keys(sort.value).forEach((objKey) => {\n    sort.value[objKey] =\n      objKey !== key ? Sort.None : calculateNextSortStatus(sort.value[objKey]);\n  });\n  fetchDataAsync();\n};\n//#endregion\n\n//#region computed\nconst tableMaxHeight = computed(() => {\n  const pageHeaderHeight = 98;\n  const labelSelectedItemHeight = selectedKeys.value.length ? 30 : 0;\n  const tableHeaderHeight = 58;\n  const tableFooterHeight = 60;\n  const marginBottom = 30;\n\n  return (\n    innerHeight.value -\n    tableHeaderHeight -\n    labelSelectedItemHeight -\n    tableFooterHeight -\n    pageHeaderHeight -\n    marginBottom\n  );\n});\n//#endregion\n\n//#region reactive\nwatch(searchString, onSearchChange);\n//#endregion\n</script>\n\n<style lang=\"scss\" scoped>\n.table-container {\n  flex-grow: 1;\n  height: calc(100% - 98px - 30px);\n  &__lbl-data-selected {\n    font-style: normal;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 20px;\n    color: \\$neutral-600;\n    margin-bottom: 10px;\n  }\n\n  &__list-item-text {\n    font-style: normal;\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 20px;\n    color: \\$neutral-600;\n  }\n}\n\n.action-icon {\n  margin-left: 30px;\n  cursor: pointer;\n}\n\n:deep() {\n  .ant-table-tbody > tr.ant-table-row-selected > td {\n    background: \\$grey-2;\n    border-color: rgba(0, 0, 0, 0.03);\n  }\n\n  .ant-table-row {\n    cursor: pointer;\n  }\n\n  .ant-checkbox-inner {\n    width: 22px;\n    height: 22px;\n    border-radius: 4px !important;\n    border: 1px solid \\$neutral-200 !important;\n  }\n\n  .ant-checkbox-checked .ant-checkbox-inner {\n    width: 22px;\n    height: 22px;\n    border-radius: 4px !important;\n    border: 1px solid \\$primary !important;\n  }\n\n  .ant-pagination-options {\n    .ant-pagination-options-size-changer {\n      .ant-select-selector {\n        width: auto !important;\n        padding: 6px !important;\n      }\n      .ant-select-selection-item {\n        .options-text {\n          span {\n            font-style: normal;\n            font-weight: 700;\n            font-size: 14px;\n            line-height: 18px;\n            color: \\$neutral-600;\n          }\n\n          img {\n            width: 16px;\n            height: 16px;\n            vertical-align: middle;\n          }\n        }\n      }\n\n      .ant-select-arrow {\n        display: none;\n      }\n    }\n  }\n}\n</style>\n"
    ],
    "description": "Generate Common List Screen"
  }
}
